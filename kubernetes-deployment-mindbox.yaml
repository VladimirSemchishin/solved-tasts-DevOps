 ---
### Name space
apiVersion: v1
kind: NameSpace
metadata:			#Создал пространство имен (для подов)
  name: web-project
  
 ---
### LoadBalancer
apiVersion: v1
kind: Servise
metadata:
  name: load-balancer			# создаю балансировщик
  namespace: web-project
spec:
  ports:
  - port: 80			
    name: web-project-port
    targetPort: 8080
  selector:
    app: web-project-pod
  type: LoadBalancer
  loadBalancerIP: 10.10.130.145		# определение фисированного IP. Через него будет единый доступ ко всем сущестующим подам (развернутом на них приложении), в том числе и вне кластера.

 ---
### Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-project-dep			# сам процес развертывания
  namespace: deploy
  labels:
    app: web-project-dep
spec:
  replicas: 4
  
  strategy:				# cтратегия при которой во время обновления kubernetes
    type: RollingUpdate			# за раз может обновляться только один под,
      rollingUpdate:			# чтобы не произошла ситуация, когда поды обновляются одновременно
        maxUnavaible: 1			# а приложение недоступно, по этому только 1
  
  selector:
    matchLables:
      app: web-project-pod		# вызов пода по метке  
  template:				# описание шаблона пода 
    metadata:
      lables:
        app: deploy
    spec:				
      containers:			# описываю под, в нем контейнер
      - name: image-ubuntu		# имя контейнера
        image: adress-image-ubuntu	# образ контейнера (адрес)
      	ports:
      	  containerPort: 8080		# порт контейнера
        
        resources:			# количество ресурсов и лимиты
          requests:			
            memory: "128M"		# исзодя из опыта работы столько паяти и CPU хватает
            cpu: 0.1
          limits:			# лимиты я установил следующие поскольку
            memory: "150M"		# задача поставлена на максимально устойчивый деплоймент (запас не - не дорого и не помешает)
            cpu: 0.4			# запас поставлен не завышенынй, поскольку при 50% использовании CPU создастся новый под, который возьмет на себя часть нагрузки
      
      readinessProbe:	 		# проверка роботоспособности, если команда выдаст что 
        exen:				# кроме 0 (healthy), значит сайт unhealthy
          command:
          - cat
          - /tmp/health
        initialDelaySeconds: 10		# но первые 10 секунд проверки не будет, поскольку развертывание приложения занимает 5-10 секунд
        periodSeconds: 5		# после, проверка каждые 5 секунд
    
 ---
### Horizontal Pod Autoscaler
apiVersion: autoscaling/v1		
kind: HorizontalPodAutoscaler
metadata:
  name: HPA				# Автоматическое масштабирование
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-project-dep
  minReplicas: 1			# минимально возможное количество подов
  maxReplicas: 4			# максимально возможно кол-во подов
  metrics: 				# указываю, что при достижении нагрузки н
  - type: Resource			# а ЦП в 50% будет создан новый под, но если он не пятый.
    resource:
    - name: cpu
      target:
        type: Utilization
        averageUtilization: 50
